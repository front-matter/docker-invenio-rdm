# Example of a full InvenioRDM infrastructure stack
#
# Note, this file is not suitable for a production deployment. It is only an
# example of all the infrastructure components needed in a real production
# deployment.
#
# Usage::
#
#   $ docker compose up
#
# The following services are included:
# - Frontend: Nginx (exposed ports: 40 and 443)
# - UI application: UWSGI (not exposed)
# - API application: UWSGI (not exposed)
# - Cache: Redis (exposed port: 6379)
# - DB: (PostgresSQL) (exposed port: 5432)
# - Message queue: RabbitMQ (exposed ports: 5672, 15672)
# - Search platform: OpenSearch (exposed ports: 9200, 9600)
# - OpenSearch Dashboard (view OS indexes) (exposed ports: 5601)

version: "3.8"
services:
  cache:
    image: redis:7
    restart: "unless-stopped"
    read_only: true
    ports:
      - "6379:6379"
  db:
    image: postgres:12.4
    restart: "unless-stopped"
    ports:
      - "5432:5432"
  pgadmin:
    image: dpage/pgadmin4:7.1
    restart: "unless-stopped"
    ports:
      - "5050:80"
  mq:
    image: rabbitmq:3-management
    restart: "unless-stopped"
    ports:
      - "15672:15672"
      - "5672:5672"
  mailhog:
    image: mailhog/mailhog:v1.0.1
    logging:
      driver: 'none'
    ports:
      - "1025:1025"
      - "8025:8025"
  search:
    image: opensearchproject/opensearch:2.3.0
    restart: "unless-stopped"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    mem_limit: 2g
    ports:
      - "9200:9200"
      - "9600:9600"
  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:2.3.0
    ports:
      - "5601:5601"
    expose:
      - "5601"
  frontend:
    image: ghcr.io/front-matter/invenio-rdm-frontend:v12.0.0b2.dev2
    restart: "unless-stopped"
    volumes:
      - static_data:/opt/invenio/var/instance/static
    depends_on:
      - web-ui
      - web-api
    ports:
      - "80:80"
      - "443:443"
  web-ui:
    image: ghcr.io/front-matter/invenio-rdm:v12.0.0b2.dev2
    restart: "unless-stopped"
    command: ["uwsgi /opt/invenio/var/instance/uwsgi_ui.ini --uid invenio"]
    ports:
      - "5000"
    volumes:
      - static_data:/opt/invenio/var/instance/static
      - ./invenio/uploaded_data:/opt/invenio/var/instance/data
      - ./invenio/archived_data:/opt/invenio/var/instance/archive
  web-api:
    image: ghcr.io/front-matter/invenio-rdm:v12.0.0b2.dev2
    restart: "unless-stopped"
    command: ["uwsgi /opt/invenio/var/instance/uwsgi_rest.ini --uid invenio"]
    ports:
      - "5000"
    volumes:
      - ./invenio/app_data:/opt/invenio/var/instance/app_data
      - ./invenio/uploaded_data:/opt/invenio/var/instance/data
      - ./invenio/archived_data:/opt/invenio/var/instance/archive
  worker:
    image: ghcr.io/front-matter/invenio-rdm:v12.0.0b2.dev2
    restart: "unless-stopped"
    command: ["celery -A invenio_app.celery worker --beat --loglevel=WARNING"]
    volumes:
      - ./invenio/uploaded_data:/opt/invenio/var/instance/data
    depends_on:
      search:
        condition: service_started
      cache:
        condition: service_started
      db:
        condition: service_started
      mq:
        condition: service_started
      mailhog:
        condition: service_started
  web-api-init:
    image: ghcr.io/front-matter/invenio-rdm:v12.0.0b2.dev2
    restart: "no"
    entrypoint: [ "bash", "init.sh"] 
    depends_on:
      search:
        condition: service_started
      cache:
        condition: service_started
      db:
        condition: service_started
      mq:
        condition: service_started
      mailhog:
        condition: service_started
    volumes:
      - ./invenio/init.sh:/opt/invenio/src/init.sh
volumes:
  static_data:
  uploaded_data:
  archived_data:
